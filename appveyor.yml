version: 1.0.{build}

shallow_clone: true

environment:
  matrix:
    # 
    # easyRNG
    # gtkmm-plplot
    # with updater
    # with gui
    # with google analytics
    # deploy!!!
    - compiler: msvc_msys2
      ARCH: x64
      MSYS2_ARCH: x86_64
      MSYS2_DIR: msys64
      MSYSTEM: MINGW64
      UPDATER: true
      RNG: easyRNG
      PLOT: gtkmm-plplot
      GOOGLE_ANALYTICS: true
      DEPLOY: true
      DO_NOT_USE_DATA: true
      AWS_ACCESS_KEY_ID:
        secure: as0hWwT58vrW+qE5mWk2iuyZR1gS8XAiZQoOcKryD6Q=
      AWS_SECRET_ACCESS_KEY:
        secure: jv5vo1d6GE7SPRR2hxBWwJe35Q4PvFurPjyILTTjbfywRsRUumLKuolekfu+CkIk
    # 3
    # fgsl
    # gtkmm-plplot
    # no updater
    # with gui
    - compiler: msvc_msys2
      ARCH: x64
      MSYS2_ARCH: x86_64
      MSYS2_DIR: msys64
      MSYSTEM: MINGW64
      UPDATER: false
      RNG: fgsl
      PLOT: gtkmm-plplot
    # 4
    # fgsl
    # gtkmm-plplot
    # with updater
    # with gui
    - compiler: msvc_msys2
      ARCH: x64
      MSYS2_ARCH: x86_64
      MSYS2_DIR: msys64
      MSYSTEM: MINGW64
      UPDATER: true
      RNG: fgsl
      PLOT: gtkmm-plplot
    # 5
    # fgsl
    # no gui
    - compiler: msvc_msys2
      ARCH: x64
      MSYS2_ARCH: x86_64
      MSYS2_DIR: msys64
      MSYSTEM: MINGW64
      RNG: fgsl
    # 8
    # easyRNG
    # gtkmm-plplot
    # no updater
    # with gui
    - compiler: msvc_msys2
      ARCH: x64
      MSYS2_ARCH: x86_64
      MSYS2_DIR: msys64
      MSYSTEM: MINGW64
      UPDATER: false
      RNG: easyRNG
      PLOT: gtkmm-plplot
    # 9
    # easyRNG
    # gtkmm-plplot
    # with updater
    # with gui
    - compiler: msvc_msys2
      ARCH: x64
      MSYS2_ARCH: x86_64
      MSYS2_DIR: msys64
      MSYSTEM: MINGW64
      UPDATER: true
      RNG: easyRNG
      PLOT: gtkmm-plplot
    # 10
    # easyRNG
    # no gui
    - compiler: msvc_msys2
      ARCH: x64
      MSYS2_ARCH: x86_64
      MSYS2_DIR: msys64
      MSYSTEM: MINGW64
      RNG: easyRNG

before_build:
    - choco install innosetup
    - set PATH=C:\%MSYS2_DIR%\%MSYSTEM%\bin;C:\%MSYS2_DIR%\usr\bin;%PATH%
    - call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
    - echo %path%
    - bash -lc "for i in {1..3}; do pacman -Syyuu --noconfirm --ask 20 && break || sleep 15; done"
    - bash -lc "for i in {1..3}; do pacman -Suu --noconfirm --ask 20 && break || sleep 15; done"
    - bash -lc "for i in {1..3}; do pacman --noconfirm --ask 20 -Su mingw-w64-%MSYS2_ARCH%-{gcc,libtool,curl,gcc-fortran,libxslt,glib2,libsoup} automake autoconf make wget tar && break || sleep 15; done"
    - bash -lc "cd \"$APPVEYOR_BUILD_FOLDER\" && exec ./appveyor-before-build.sh"

build_script:
    - bash -lc "cd \"$APPVEYOR_BUILD_FOLDER\" && exec ./appveyor-build-script.sh"

branches:
  only:
    - master

artifacts:
  - path: XMI-MSIM-*.exe
    name: installer

deploy:
  provider: S3
  access_key_id: $(AWS_ACCESS_KEY_ID)
  secret_access_key: $(AWS_SECRET_ACCESS_KEY)
  bucket: xmi-msim
  region: us-east-1
  set_public: true
  folder: nightly
  artifact: installer
  reduced_redundancy: true

# this should not be necessary as new files will be visible on cloudfront soon after uploading to the bucket, even without invalidating...
#after_deploy:
#  - aws cloudfront create-invalidation --distribution-id E37CS1EID6VGVO --paths '/*'
